"""
Custom tools for vulnerability detection using nmap and CVE databases.
"""

import json
import nmap
import requests
import subprocess
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
from crewai_tools import BaseTool


class NmapScanTool(BaseTool):
    """Tool for performing nmap vulnerability scans."""
    
    name: str = "Nmap Vulnerability Scanner"
    description: str = "Performs nmap vulnerability scans using --script vuln to detect CVE vulnerabilities"
    
    def _run(self, target_ip: str, scan_type: str = "vuln") -> str:
        """
        Run nmap vulnerability scan against target.
        
        Args:
            target_ip: Target IP address to scan
            scan_type: Type of scan (vuln, default, etc.)
        
        Returns:
            JSON string containing scan results
        """
        try:
            # Get user confirmation before running scan
            print(f"\n🔍 About to run nmap scan against {target_ip}")
            print(f"Command: nmap -sV --script vuln {target_ip}")
            confirm = input("Do you want to proceed? (y/N): ").strip().lower()
            
            if confirm != 'y':
                return json.dumps({"error": "Scan cancelled by user", "status": "cancelled"})\n            \n            # Initialize nmap scanner\n            nm = nmap.PortScanner()\n            \n            # Run vulnerability scan\n            print(f"Starting nmap scan on {target_ip}...")\n            scan_args = f"-sV --script vuln"\n            scan_result = nm.scan(target_ip, arguments=scan_args)\n            \n            # Parse results\n            results = {\n                "target": target_ip,\n                "scan_time": time.strftime("%Y-%m-%d %H:%M:%S"),\n                "nmap_version": nm.nmap_version(),\n                "hosts": {},\n                "vulnerabilities": []\n            }\n            \n            # Process each host\n            for host in nm.all_hosts():\n                host_info = {\n                    "ip": host,\n                    "hostname": nm[host].hostname(),\n                    "state": nm[host].state(),\n                    "protocols": {},\n                    "vulnerabilities": []\n                }\n                \n                # Process protocols and ports\n                for protocol in nm[host].all_protocols():\n                    ports = nm[host][protocol].keys()\n                    host_info["protocols"][protocol] = {}\n                    \n                    for port in ports:\n                        port_info = nm[host][protocol][port]\n                        host_info["protocols"][protocol][port] = {\n                            "state": port_info["state"],\n                            "name": port_info.get("name", ""),\n                            "product": port_info.get("product", ""),\n                            "version": port_info.get("version", ""),\n                            "script": port_info.get("script", {})\n                        }\n                        \n                        # Extract vulnerabilities from script output\n                        if "script" in port_info:\n                            for script_name, script_output in port_info["script"].items():\n                                if "vuln" in script_name.lower() or "cve" in script_output.lower():\n                                    vuln_info = {\n                                        "port": port,\n                                        "protocol": protocol,\n                                        "script": script_name,\n                                        "output": script_output,\n                                        "cves": self._extract_cves(script_output)\n                                    }\n                                    host_info["vulnerabilities"].append(vuln_info)\n                                    results["vulnerabilities"].append(vuln_info)\n                \n                results["hosts"][host] = host_info\n            \n            # Save results to file\n            output_file = Path("./data") / f"nmap_scan_{target_ip.replace('.', '_')}_{int(time.time())}.json"\n            output_file.parent.mkdir(exist_ok=True)\n            \n            with open(output_file, 'w') as f:\n                json.dump(results, f, indent=2)\n            \n            print(f"Scan completed. Results saved to: {output_file}")\n            \n            return json.dumps(results, indent=2)\n            \n        except Exception as e:\n            error_result = {\n                "error": str(e),\n                "target": target_ip,\n                "status": "failed"\n            }\n            return json.dumps(error_result, indent=2)\n    \n    def _extract_cves(self, script_output: str) -> List[str]:\n        """Extract CVE identifiers from script output."""\n        import re\n        cve_pattern = r'CVE-\\d{4}-\\d{4,}'\n        return list(set(re.findall(cve_pattern, script_output, re.IGNORECASE)))\n\n\nclass CVELookupTool(BaseTool):\n    """Tool for looking up CVE information from various databases."""\n    \n    name: str = "CVE Information Lookup"\n    description: str = "Looks up CVE vulnerability information from databases"\n    \n    def _run(self, cve_id: str) -> str:\n        \"\"\"Look up CVE information.\n        \n        Args:\n            cve_id: CVE identifier (e.g., CVE-2020-1472)\n            \n        Returns:\n            JSON string containing CVE information\n        \"\"\"\n        try:\n            # Clean CVE ID\n            cve_id = cve_id.strip().upper()\n            if not cve_id.startswith('CVE-'):\n                return json.dumps({\"error\": \"Invalid CVE format\", \"provided\": cve_id})\n            \n            print(f\"Looking up CVE information for: {cve_id}\")\n            \n            # Try multiple sources\n            cve_info = {\n                \"cve_id\": cve_id,\n                \"sources\": {},\n                \"summary\": \"\",\n                \"cvss_score\": None,\n                \"severity\": \"\",\n                \"references\": [],\n                \"affected_products\": []\n            }\n            \n            # Source 1: NVD (National Vulnerability Database)\n            try:\n                nvd_url = f\"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}\"\n                response = requests.get(nvd_url, timeout=10)\n                \n                if response.status_code == 200:\n                    nvd_data = response.json()\n                    if nvd_data.get('vulnerabilities'):\n                        vuln = nvd_data['vulnerabilities'][0]['cve']\n                        cve_info[\"sources\"][\"nvd\"] = {\n                            \"description\": vuln.get('descriptions', [{}])[0].get('value', ''),\n                            \"published\": vuln.get('published', ''),\n                            \"modified\": vuln.get('lastModified', ''),\n                            \"references\": [ref.get('url', '') for ref in vuln.get('references', [])]\n                        }\n                        \n                        # Extract CVSS score\n                        if 'metrics' in vuln:\n                            cvss = vuln['metrics']\n                            if 'cvssMetricV31' in cvss:\n                                score = cvss['cvssMetricV31'][0]['cvssData']['baseScore']\n                                cve_info[\"cvss_score\"] = score\n                                cve_info[\"severity\"] = self._get_severity(score)\n                        \n                        cve_info[\"summary\"] = cve_info[\"sources\"][\"nvd\"][\"description\"]\n                        cve_info[\"references\"] = cve_info[\"sources\"][\"nvd\"][\"references\"]\n                        \n            except Exception as e:\n                cve_info[\"sources\"][\"nvd_error\"] = str(e)\n            \n            # Source 2: MITRE (fallback)\n            try:\n                mitre_url = f\"https://cve.mitre.org/cgi-bin/cvename.cgi?name={cve_id}\"\n                cve_info[\"sources\"][\"mitre_url\"] = mitre_url\n            except Exception as e:\n                cve_info[\"sources\"][\"mitre_error\"] = str(e)\n            \n            # Check if this is Zerologon\n            if cve_id == \"CVE-2020-1472\":\n                cve_info[\"zerologon_info\"] = {\n                    \"name\": \"Zerologon\",\n                    \"description\": \"Critical vulnerability in Windows Netlogon Remote Protocol\",\n                    \"impact\": \"Complete domain takeover\",\n                    \"affected\": \"Windows Server 2008 R2, 2012, 2012 R2, 2016, 2019\",\n                    \"exploit_available\": True\n                }\n            \n            return json.dumps(cve_info, indent=2)\n            \n        except Exception as e:\n            error_result = {\n                \"error\": str(e),\n                \"cve_id\": cve_id,\n                \"status\": \"failed\"\n            }\n            return json.dumps(error_result, indent=2)\n    \n    def _get_severity(self, cvss_score: float) -> str:\n        \"\"\"Convert CVSS score to severity level.\"\"\"\n        if cvss_score >= 9.0:\n            return \"CRITICAL\"\n        elif cvss_score >= 7.0:\n            return \"HIGH\"\n        elif cvss_score >= 4.0:\n            return \"MEDIUM\"\n        else:\n            return \"LOW\"\n\n\nclass ReportGeneratorTool(BaseTool):\n    \"\"\"Tool for generating vulnerability assessment reports.\"\"\"\n    \n    name: str = \"Vulnerability Report Generator\"\n    description: str = \"Generates comprehensive vulnerability assessment reports in markdown format\"\n    \n    def _run(self, scan_data: str, target_ip: str) -> str:\n        \"\"\"Generate vulnerability report.\n        \n        Args:\n            scan_data: JSON string containing scan results\n            target_ip: Target IP address\n            \n        Returns:\n            Path to generated report file\n        \"\"\"\n        try:\n            # Parse scan data\n            data = json.loads(scan_data) if isinstance(scan_data, str) else scan_data\n            \n            # Generate report content\n            report_content = self._generate_markdown_report(data, target_ip)\n            \n            # Save report\n            timestamp = time.strftime(\"%Y%m%d_%H%M%S\")\n            report_file = Path(\"./data\") / f\"vulnerability_report_{target_ip.replace('.', '_')}_{timestamp}.md\"\n            report_file.parent.mkdir(exist_ok=True)\n            \n            with open(report_file, 'w', encoding='utf-8') as f:\n                f.write(report_content)\n            \n            print(f\"Report generated: {report_file}\")\n            return str(report_file)\n            \n        except Exception as e:\n            return f\"Error generating report: {str(e)}\"\n    \n    def _generate_markdown_report(self, data: Dict[str, Any], target_ip: str) -> str:\n        \"\"\"Generate markdown report content.\"\"\"\n        \n        report = f\"\"\"# Vulnerability Assessment Report\n\n## Executive Summary\n\n**Target:** {target_ip}  \n**Scan Date:** {data.get('scan_time', 'Unknown')}  \n**Nmap Version:** {data.get('nmap_version', 'Unknown')}  \n\n## Scan Overview\n\nThis report contains the results of an automated vulnerability assessment performed against {target_ip}.\n\n### Summary Statistics\n\n- **Total Hosts Scanned:** {len(data.get('hosts', {}))}\n- **Total Vulnerabilities Found:** {len(data.get('vulnerabilities', []))}\n- **Scan Method:** Nmap with vulnerability scripts\n\n## Vulnerabilities Detected\n\n\"\"\"\n        \n        vulnerabilities = data.get('vulnerabilities', [])\n        \n        if not vulnerabilities:\n            report += \"No vulnerabilities were detected during this scan.\\n\\n\"\n        else:\n            for i, vuln in enumerate(vulnerabilities, 1):\n                report += f\"\"\"### Vulnerability #{i}\n\n**Port:** {vuln.get('port', 'Unknown')}  \n**Protocol:** {vuln.get('protocol', 'Unknown')}  \n**Script:** {vuln.get('script', 'Unknown')}  \n\n**CVEs Identified:**\n\"\"\"\n                \n                cves = vuln.get('cves', [])\n                if cves:\n                    for cve in cves:\n                        report += f\"- {cve}\\n\"\n                else:\n                    report += \"- No specific CVEs identified\\n\"\n                \n                report += f\"\\n**Script Output:**\\n```\\n{vuln.get('output', 'No output available')}\\n```\\n\\n\"\n        \n        report += f\"\"\"## Host Information\n\n\"\"\"\n        \n        for host_ip, host_info in data.get('hosts', {}).items():\n            report += f\"\"\"### Host: {host_ip}\n\n**Hostname:** {host_info.get('hostname', 'Unknown')}  \n**State:** {host_info.get('state', 'Unknown')}  \n\n**Open Ports:**\n\"\"\"\n            \n            for protocol, ports in host_info.get('protocols', {}).items():\n                report += f\"\\n**{protocol.upper()} Ports:**\\n\"\n                for port, port_info in ports.items():\n                    service = port_info.get('name', 'unknown')\n                    product = port_info.get('product', '')\n                    version = port_info.get('version', '')\n                    state = port_info.get('state', '')\n                    \n                    report += f\"- {port}/{protocol} - {service}\"\n                    if product:\n                        report += f\" ({product}\"\n                        if version:\n                            report += f\" {version}\"\n                        report += \")\"\n                    report += f\" [{state}]\\n\"\n        \n        report += f\"\"\"\\n## Recommendations\n\n### Immediate Actions\n\n1. **Patch Management:** Apply the latest security patches for all identified vulnerabilities\n2. **Network Segmentation:** Implement proper network segmentation to limit exposure\n3. **Access Controls:** Review and strengthen access controls for affected services\n\n### Long-term Recommendations\n\n1. **Regular Vulnerability Assessments:** Conduct regular automated vulnerability scans\n2. **Security Monitoring:** Implement continuous security monitoring\n3. **Incident Response:** Ensure incident response procedures are in place\n\n## Conclusion\n\nThis automated vulnerability assessment identified {len(vulnerabilities)} potential security issues. \nImmediate attention should be given to any critical or high-severity vulnerabilities.\n\n---\n\n*Report generated by Vulnerability Detection Agent*  \n*Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}*\n\"\"\"\n        \n        return report\n